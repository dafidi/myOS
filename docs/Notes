# Qemu
To close qemu from the terminal, you can use `ctrl+a c` ;).
To open qemu console in vscode `esc+2`.

Qemu montor docs here: https://qemu.readthedocs.io/en/latest/system/monitor.html
To save ram as file: `memsave addr size file`

# Assembly
Intel syntax: mov dest, src
ATT   syntax: mov src, dest

The sequence:

    cmp al, 128
	jg int_0x13

translates to

    if 128 > al:
        jump to int_0x13

# Intel ia32 manual.
#NP is segment-not-present exception, #GP is general-protection exception, #TS is invalid-TSS exception, and #SS is stack-fault exception.

# Generic

- Create 16GiB file
fallocate -l 16G <file-name>

- Copy all the bytes of fs.fs to an offset of 262144 * 512 bytes into disk.hdd.
dd if=fs.fs of=disk.hdd obs=512 seek=262144 conv=notrunc

- To disassemble nasm binary:
ndisasm # Linux

- Inspect fs components on disk. The params to be aware of are start, skip and length

START_SECTOR = COMPONENT_START_SECTOR
SKIP (depends on where in the component you want to start reading from)
LENGTH (depends on how much data you want to view)

hexdump -C -s $((START_SECTOR * 512 + (SKIP) -n LENGTH)) disk.hdd

-- Inspect 1024 bytes skipping the first 8404993 bytes of the sector_bitmap:
(This example skips the first 8404993 / 8 bytes because that is how many bytes are occupied
by the fs components and we want to view the bits used by the files & folders, not the
fs components.)
hexdump -C -s $((8193 * 512 + (8404993 / 8))) -n 1024 disk.hdd

It would appear that when gcc is compiling to 64 bits, it will round the entry point address to be aligned to 0x1000.

This article was useful in implementing transition to 64-bit:
https://0xax.gitbooks.io/linux-insides/content/Booting/linux-bootstrap-4.html

Had to build gnu gcc because the man page for the built-in ld says it:
"always creates a "thin" (single-architecture), standard Mach-O output file"
But we need to be able to  create output files that are not mac-specific.
ld complains about the format of the object files from nasm not being in the
macho format.
...
Compiling gcc for mac has been a little annoying because there seemed to be many
issues with header files and system libraries not being found.
Best attempt so far is by adding --with-sysroot=/Library/... and 
CC="clang --sysroot=/Library/..." CXX="clang++ --sysroot=/Library/..." to
configure.
Hopefully, this custom-built gcc will be able to work with the format of output
nasm's output and will produce a baremetal binary that QEMU can run.

The commands which appear to have completed a successful build are:
../gcc-13.1.0/configure --prefix=/Users/davidawogbemila/Downloads/Software_Installation/gcc-13.1.0 --enable-languages=c --with-sysroot=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk CC="clang --sysroot=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk" CXX="clang++ --sysroot=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk"

and

make -j8 bootstrap

And I learnt abou the options from here:
https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90834
